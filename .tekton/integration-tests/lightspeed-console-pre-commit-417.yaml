---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ols-console-pre-commits
spec:
  description: |
    This pipeline automates the process of running end-to-end tests for OpenShift Lightspeed
    using a ROSA (Red Hat OpenShift Service on AWS) cluster. The pipeline provisions
    the ROSA cluster, installs the OpenShift Lightspeed operator using the installer, runs the tests, collects artifacts,
    and finally deprovisions the ROSA cluster.
  params:
    - name: SNAPSHOT
      description: 'The JSON string representing the snapshot of the application under test.'
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
    - name: test-name
      description: 'The name of the test corresponding to a defined Konflux integration test.'
      default: 'ols-console-pre-commits'
    - name: namespace
      description: 'Namespace to run tests in'
      default: 'openshift-lightspeed'
  tasks:
    - name: eaas-provision-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - eaas-provision-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "4.17."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.xlarge"
              - name: imageContentSources
                value: |
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-rhel9-operator
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-operator
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-operator-bundle
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/bundle
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-service-api-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-service
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-console-plugin-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/ols/lightspeed-console
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-console-plugin-pf5-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/lightspeed-console-pf5
                  - source: registry.redhat.io/openshift-lightspeed/lightspeed-to-dataverse-exporter-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/lightspeed-to-dataverse-exporter
                  - source: registry.redhat.io/openshift-lightspeed/openshift-mcp-server-rhel9
                    mirrors:
                      - quay.io/redhat-user-workloads/crt-nshift-lightspeed-tenant/openshift-mcp-server
    - name: extract-snapshot-metadata
      description: Extract console image and commit from SNAPSHOT input
      runAfter:
        - eaas-provision-space
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
      taskSpec:
        results:
          - name: console-image
            value: "$(steps.get-snapshot-images.results.console-image)"
          - name: commit
            value: "$(steps.get-snapshot-images.results.commit)"
        params:
          - name: SNAPSHOT
        steps:
          - name: get-snapshot-images
            image: registry.redhat.io/openshift4/ose-cli:latest
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
            results:
              - name: console-image
                type: string
                description: "console image from snapshot"
              - name: commit
                type: string
                description: "commit sha to be used in console tests"
            script: |
              dnf -y install jq
              echo -n "$(jq -r --arg component_name "lightspeed-console-pf5" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")" > $(step.results.console-image.path)
              echo -n "$(jq -r --arg component_name "lightspeed-console-pf5" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "$SNAPSHOT")" > $(step.results.commit.path)
    - name: ols-e2e-tests
      description: Task to run tests from service repository
      runAfter:
        - extract-snapshot-metadata
        - provision-cluster
      params:
        - name: console-image
          value: $(tasks.extract-snapshot-metadata.results.console-image)
        - name: commit
          value: $(tasks.extract-snapshot-metadata.results.commit)
      taskSpec:
        volumes:
          - name: openai-token
            secret:
              secretName: openai
          - name: credentials
            emptyDir: {}
          - name: ols-konflux-artifacts-bot-creds
            secret:
              secretName: ols-konflux-artifacts-bot
        params:
          - name: console-image
          - name: commit
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: run-e2e-tests
            onError: continue
            volumeMounts:
              - name: openai-token
                mountPath: /var/run/openai
              - name: credentials
                mountPath: /credentials
            env:
              - name: CYPRESS_KUBECONFIG_PATH
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: CYPRESS_LOGIN_IDP
                value: "kube:admin"
              - name: LLM_TOKEN_PATH
                value: "/var/run/openai/token"
              - name: CYPRESS_CONSOLE_IMAGE
                value: "$(params.console-image)"
              - name: COMMIT_SHA
                value: "$(params.commit)"
              - name: PASSWORD_PATH
                value: "/credentials/$(steps.get-kubeconfig.results.passwordPath)"
              - name: CYPRESS_BASE_URL
                value: "$(steps.get-kubeconfig.results.consoleURL)"
            resources:
              limits:
                memory: 8Gi
            image: cypress/browsers:24.11.0
            script: |
              echo "COMMIT_SHA: ${COMMIT_SHA}"
              echo "CYPRESS_BASE_URL: ${CYPRESS_BASE_URL}"
              echo "CYPRESS_CONSOLE_IMAGE: ${CYPRESS_CONSOLE_IMAGE}"
              echo "CYPRESS_KUBECONFIG_PATH: ${CYPRESS_KUBECONFIG_PATH}"
              echo "---------------------------------------------"
              cat "${CYPRESS_KUBECONFIG_PATH}"
              echo "---------------------------------------------"
              wget --no-verbose -O oc.tar.gz https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux.tar.gz \
                  && tar -xvzf oc.tar.gz \
                  && chmod +x kubectl oc \
                  && mv oc kubectl /usr/local/bin/
              echo "---------------------------------------------"
              export OPERATOR_SDK_VERSION=1.36.1
              export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
              export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
              wget --no-verbose -O /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_linux_${ARCH}
              chmod +x /usr/local/bin/operator-sdk
              echo "---------------------------------------------"
              operator-sdk version
              echo "---------------------------------------------"
              mkdir -pv ~/.cache/xdgr
              export XDG_RUNTIME_DIR=$PATH:~/.cache/xdgr
              echo "---------------------------------------------"
              cd /home
              rm -rf lightspeed-console
              git clone https://github.com/openshift/lightspeed-console.git
              cd lightspeed-console
              git config --global user.email olsci@redhat.com
              git config --global user.name olsci
              git fetch origin ${COMMIT_SHA}
              git checkout ${COMMIT_SHA}
              echo "---------------------------------------------"
              echo "npm version: $(npm -v)"
              echo "---------------------------------------------"
              NODE_OPTIONS=--max-old-space-size=4096 npm ci --omit=optional --no-fund
              echo "---------------------------------------------"
              export CYPRESS_LOGIN_PASSWORD=$(cat ${PASSWORD_PATH})
              set +e
              NO_COLOR=1 npx cypress run
              err_status=$?
              echo -n "${err_status}" > /workspace/cypress-exit-code
              echo "---------------------------------------------"
              ls ./gui_test_screenshots
              mv ./gui_test_screenshots /workspace/artifacts/
              set -e
              echo "Cypress exit code: ${err_status}"
              echo "---------------------------------------------"
          - name: gather-cluster-resources
            onError: continue
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/gather-cluster-resources/0.1/gather-cluster-resources.yaml
            params:
              - name: credentials
                value: "credentials"
              - name: kubeconfig
                value: "$(steps.get-kubeconfig.results.kubeconfig)"
              - name: artifact-dir
                value: "/workspace/artifacts/konflux-artifacts"
          # validate that the cluster resources are available in another tekton step
          - name: list-artifacts
            onError: continue
            image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
            workingDir: "/workspace/"
            script: |
              #!/bin/bash
              echo "ls -la /workspace/artifacts/gui_test_screenshots:"
              ls -la /workspace/artifacts/gui_test_screenshots
          - name: push-artifacts
            onError: continue
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/secure-push-oci/0.1/secure-push-oci.yaml
            params:
              - name: workdir-path
                value: "/workspace/artifacts"
              - name: oci-ref
                value: "quay.io/openshift-lightspeed/ols-console-artifacts:$(params.commit)"
              - name: credentials-volume-name
                value: ols-konflux-artifacts-bot-creds
          - name: assert-cypress-succeeded
            image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
            workingDir: "/workspace/"
            script: |
              #!/bin/bash
              set -euo pipefail
              code_file="/workspace/cypress-exit-code"
              if [ ! -f "$code_file" ]; then
                echo "Cypress exit code file missing at $code_file"
                exit 99
              fi
              code=$(cat "$code_file")
              if [ "$code" != "0" ]; then
                echo "Cypress failed with exit code: $code"
                exit "$code"
              fi
              echo "Cypress tests passed"
          - name: fail-if-any-step-failed
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/tekton-integration-catalog.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/fail-if-any-step-failed/0.1/fail-if-any-step-failed.yaml
